@*https://codepen.io/triss90/pen/bZaQYJ*@
@inject IJSRuntime Runtime

<pre class="code" style="background:black" contenteditable="true" @ref="cellElement" @onkeyup="onKeyUp">
@((MarkupString)MarkDownText)
</pre>

<style>
    * {
        box-sizing: border-box;
    }

    h1 {
        text-align: center;
        color: #232B2B;
        margin: 50px;
    }

    .code {
        background: #232B2B;
        border-radius: 3px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.4);
        border-left: 6px solid #516363;
        width: 95%;
        margin: 50px auto;
        white-space: pre-wrap;
        padding: 20px 20px 20px 50px;
        color: #c7d3de;
        counter-reset: step;
        counter-increment: step 0;
        position: relative;
    }

        .code .l {
            line-height: 1.4em;
        }

            .code .l:before {
                color: #516363;
                position: absolute;
                left: 15px;
                content: counter(step);
                counter-increment: step;
            }

    .selector {
        color: #c7d3de;
    }

    .property {
        color: #99c791;
    }

    .value {
        color: #bf94c0;
    }
</style>

@code
{
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public string Width { get; set; }
    [Parameter]
    public string Height { get; set; }
    [Parameter]
    public string Address { get; set; }
    [Parameter]
    public string Memonics { get; set; }

    string MarkDownText { get; set; } = @"<span class='l slector'>.code {</span>
    < span class='l property'>background</span>: <span class='value'>$bg-color</span>";

    ElementReference cellElement;

    async void onKeyUp()
    {
        string s = await FetchRawText();
        Console.WriteLine(s);
    }

    private async Task<string> FetchRawText()
    {
        return await  Runtime.InvokeAsync<string>("getInnerCodeCellText", cellElement);
    }

    private void GenerateMarkDownText()
    {

    }

}