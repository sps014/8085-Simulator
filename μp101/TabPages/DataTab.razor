
@if (Results != null)
{
    <TableHolder ColumnNames="TableTitle">
        @foreach (Register r in registers.Distinct())
        {
            <TableItem>
                <TableValue>@(r.Name)</TableValue>
                <TableValue>@(r.Value)</TableValue>
                <TableValue>@(r.Hex)</TableValue>
                <TableValue>@(AssemblyUtility.IsRegister(r.Name)==null?"Memory":"Register")</TableValue>

            </TableItem>
        }
        @foreach (Memory m in memories.Distinct())
        {
            <TableItem>
                <TableValue>@(Array.IndexOf(I8085.Memory, m))</TableValue>
                <TableValue>@(m.Data)</TableValue>
                <TableValue>@(m.Hex)</TableValue>
                <TableValue>Memory</TableValue>

            </TableItem>
        }
    </TableHolder>
}
else
{
    <p>Currently Data Stack is Empty</p>
}
@code
{
    private List<Register> registers = new List<Register>();
    private List<Memory> memories = new List<Memory>();

    private string[] TableTitle = new string[] { "Location", "Value", "Value(Hex)", "Type" };
    [Parameter]
    public List<LineAssembleResult> Results { get; set; }

    private void BuildData()
    {
        registers.Clear();
        memories.Clear();
        foreach (LineAssembleResult res in Results.Distinct())
        {

            foreach (Register r in res.RegistersChanged.Distinct())
            {
                registers.Add(r);
            }
            foreach (Memory m in res.MemoriesChanged.Distinct())
            {
                memories.Add(m);
            }
        }
    }
    public void Refresh()
    {
        BuildData();
        StateHasChanged();
    }
}