@page "/Intel8085"
@using μp101.Component;
@using μp101.Core;

    <ToolbarHolder>
        <IconButton Color="purple-gradient" Icon="far fa-file"></IconButton>
        <IconButton Color="purple-gradient" Icon="far fa-save"></IconButton>
        <IconButton Color="blue-gradient" Icon="fas fa-memory"></IconButton>
        <IconButton Color="peach-gradient" Icon="fas fa-fan"></IconButton>
    </ToolbarHolder>

  
    <DualGridHolder>
        <DualCard CardColor="mdb-color darken-3" TotalColumns="4">
            <CodeCell Width="100%" Height="78vh" Mnemonics="MOV A,B" TopBottomMargin="20px" />
        </DualCard>
        <DualCard CardColor="grey darken-4" TotalColumns="8">
            <TabHolder TabIDs="Tabs">
                <TabPage ID="@Tabs[0].ToString()" Active="true">
                    <br />
                    
                </TabPage>
                <TabPage ID="@Tabs[1].ToString()">
                    chalo
                </TabPage>
                <TabPage ID="@Tabs[2].ToString()">
                    <br />
                    <DualGridHolder>
                        <DualCard>
                            <label for="exampleForm2">Start At :</label>
                            <form onsubmit="return false;">
                                <input type="number" min="0" max="@(I8085.MemorySize-1)" class="form-control" @bind-value="MemoryStart">
                            </form>

                        </DualCard>
                        <DualCard>
                            <p>Maximum Cells To Display : @MemoryDisplayCount</p>
                            <input type="range"
                                   class="custom-range" max="50" min="5" step="1" @bind-value="MemoryDisplayCount" />

                        </DualCard>
                    </DualGridHolder>
                    <br />

                    <TableHolder ColumnNames="DataTable">
                        @for (int i = 0; i < MemoryDisplayCount; i++)
                        {
                            int local_i = i;
                            int currentStart = GetMemoryIndex();
                            @if (local_i + currentStart >= I8085.MemorySize)
                                break;
                            var mem = I8085.Memory[currentStart + local_i];
                            <TableItem>
                                <TableValue Color="blue-text">@(currentStart+local_i)</TableValue>
                                <TableValue>@mem.Data</TableValue>
                                <TableValue OnClick="()=> { Console.WriteLine(local_i+GetMemoryIndex()); }">@mem.Hex</TableValue>
                                <TableValue>
                                    <a class="btn btn-primary waves-effect"><i class="far fa-edit"></i></a>
                                </TableValue>
                            </TableItem>
                        }

                    </TableHolder>

                </TabPage>
                <TabPage ID="@Tabs[3].ToString()">
                    galo
                </TabPage>
                <TabPage ID="@Tabs[4].ToString()">
                    malo
                </TabPage>
            </TabHolder>
        </DualCard>

    </DualGridHolder>

<style>
    body {
        background-repeat: no-repeat;
        background: rgb(17,50,62);
        background: linear-gradient(90deg, rgba(17,50,62,1) 0%, rgba(30,41,82,1) 100%);
        background-size: 100% 100vh;
        background-position: 0% 0%;
        color:white
    }
</style>

@code
{
    private string[] Tabs = new string[] {"Data","Registers","Memory","Ports I/O","Utility" };
    private string[] DataTable= new string[] { "Location","Value","Value(Hex)","Edit" };

    private int memoryDisplayCount = 5;
    public int MemoryDisplayCount {
        get
        {
            return memoryDisplayCount;
        }
        set
        {
            memoryDisplayCount = value;
            StateHasChanged();
        }
    }

    private int memoryStart { get; set; } = 0;
    public int MemoryStart
    {
        get
        {
            return memoryStart;
        }
        set
        {
            memoryStart = value;
            StateHasChanged();
        }
    }

    private int GetMemoryIndex()
    {
        if (MemoryStart >= 0 && MemoryStart < I8085.MemorySize)
            return MemoryStart;
        else
        {
           // MemoryStart = 0;
            return 0;

        }
    }
}