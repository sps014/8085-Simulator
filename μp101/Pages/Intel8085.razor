@page "/Intel8085"

    <ToolbarHolder>
        <IconButton Color="purple-gradient" Icon="fas fa-microchip" OnClick="LoadAssembly"></IconButton>
        <IconButton Color="purple-gradient" Icon="fas fa-angle-double-right" OnClick="RunAll"></IconButton>
        <IconButton Color="blue-gradient" Icon="fas fa-angle-right" OnClick="RunLine"></IconButton>
        <IconButton Color="peach-gradient" Icon="fas fa-sync" OnClick="ResetAll"></IconButton>
    </ToolbarHolder>

<br />
  
    <DualGridHolder>
        <DualCard CardColor="mdb-color darken-3" TotalColumns="4">
            <CodeCell Width="100%" Height="78vh" Mnemonics="@(code)" TopBottomMargin="20px" />
        </DualCard>
        <DualCard CardColor="grey darken-4" TotalColumns="8">
            <TabHolder TabIDs="Tabs">
                <TabPage ID="@Tabs[0].ToString()" Active="true">
                    <br />
                    <DataTab Results="result" @ref="dataTab"/>
                </TabPage>
                <TabPage ID="@Tabs[1].ToString()">
                    <br />
                    <RegisterTab  @ref="registerTab"/>
                </TabPage>
                <TabPage ID="@Tabs[2].ToString()">
                    <FlagsTab @ref="flagsTab"/>
                </TabPage>
                <TabPage ID="@Tabs[3].ToString()">
                    <br />
                    <MemoryTab @ref="memoryTab"/>
                </TabPage>
                <TabPage ID="@Tabs[4].ToString()">
                    <UtilityTab/>
                </TabPage>
            </TabHolder>
        </DualCard>

    </DualGridHolder>

<style>
    body {
        background-repeat: no-repeat;
        background: rgb(17,50,62);
        background: linear-gradient(90deg, rgba(17,50,62,1) 0%, rgba(30,41,82,1) 100%);
        background-size: 100% 100vh;
        background-position: 0% 0%;
        color:white
    }
</style>

@code
{
    private string[] Tabs = new string[] {"Data","Registers","Flags","Memory","Utility" };
    List<LineAssembleResult> result { get; set; } = new List<LineAssembleResult>();

    protected RegisterTab registerTab { get; set; }
    protected DataTab dataTab { get; set; }
    protected FlagsTab flagsTab { get; set; }
    protected MemoryTab memoryTab { get; set; }

    string code = @"MVI B,15H
ADD B
ADI 09H
HLT";


    void LoadAssembly()
    {
        Assembler.LoadToAssembly(code);
        Console.WriteLine("Loaded Code in Assembly");
    }
    void RunLine()
    {
        Console.WriteLine("Executing a single Line in Assembly");
        var res=Assembler.ExecuteSingle();
        if (res != null)
            result.Add(res);
        Refresh();
    }
    void RunAll()
    {
        Console.WriteLine("Executing Code in Assembly");

        foreach (LineAssembleResult res in Assembler.ExecuteRemaining())
        {
            Console.WriteLine("Error"+res.ErrorMessage);
            Console.WriteLine("REg Count" + res.RegistersChanged.Count);
            result.Add(res);
        }

        Refresh();
    }
    void ResetAll()
    {

    }

    protected void Refresh()
    {
        registerTab.Refresh();
        memoryTab.Refresh();
        dataTab.Refresh();
        flagsTab.Refresh();

        StateHasChanged();
    }


}